/* src/index.svelte generated by Svelte v3.19.1 */
import { SvelteComponentDev, add_location, append_dev, children, claim_element, claim_space, claim_text, detach_dev, dispatch_dev, element, init, insert_dev, noop, safe_not_equal, space, text } from "/web_modules/svelte/internal.js";
const file = "src/index.svelte";

function create_fragment(ctx) {
  let h1;
  let t0;
  let t1;
  let h2;
  let t2;
  let t3;
  let p0;
  let t4;
  let t5;
  let p1;
  let t6;
  let t7;
  let p2;
  let t8;
  let t9;
  let p3;
  let t10;
  let t11;
  let p4;
  let t12;
  let t13;
  let p5;
  let t14;
  let t15;
  let br;
  let t16;
  let p6;
  let t17;
  let t18;
  let p7;
  let t19;
  let t20;
  let p8;
  let t21;
  const block = {
    c: function create() {
      h1 = element("h1");
      t0 = text("Hey, I'm m4rrc0");
      t1 = space();
      h2 = element("h2");
      t2 = text("blop");
      t3 = space();
      p0 = element("p");
      t4 = text("This is my contribution to the web. Impressive, right?!");
      t5 = space();
      p1 = element("p");
      t6 = text("As you can see there is not much here yet. Here is a story for you:");
      t7 = space();
      p2 = element("p");
      t8 = text("I have been teaching myself web development for approximately 5 years now.\n  Among other things I have been freelancing and creating a proto jamstack\n  website builder.");
      t9 = space();
      p3 = element("p");
      t10 = text("These wanderings lead me to a lot of reflexion about what I'll call the\n  'personal web'. A place on the web for you, that belongs to you and that you\n  can control entirely even if you are not a techie.");
      t11 = space();
      p4 = element("p");
      t12 = text("This comes with a lot of challenges but I believe we have everything we need\n  to make it happen. Sure, new protocols and big complicated tech could probably\n  help but I will leave that to smarter people. In the meantime I truly believe\n  that a more open web is just a splat of motivation away.");
      t13 = space();
      p5 = element("p");
      t14 = text("Let's find some decent defaults and a way to customize everything techie.\n  Let's use some comon sense low-tech stack. And let's start a small revolution\n  where anyone can just easily creates its personal space on the web and connect\n  with others.");
      t15 = space();
      br = element("br");
      t16 = space();
      p6 = element("p");
      t17 = text("The goal of this website is to build my personal space and to be the sandbox\n  to create tooling for anyone to do the same");
      t18 = space();
      p7 = element("p");
      t19 = text("I have got a lot of unfinished (and unstarted) articles and code snippets\n  lying around. Hopefully there is value in it and taking the time to share will\n  benefit everyone (including me).");
      t20 = space();
      p8 = element("p");
      t21 = text("Feedbacks are greatly appreciated.");
      this.h();
    },
    l: function claim(nodes) {
      h1 = claim_element(nodes, "H1", {});
      var h1_nodes = children(h1);
      t0 = claim_text(h1_nodes, "Hey, I'm m4rrc0");
      h1_nodes.forEach(detach_dev);
      t1 = claim_space(nodes);
      h2 = claim_element(nodes, "H2", {});
      var h2_nodes = children(h2);
      t2 = claim_text(h2_nodes, "blop");
      h2_nodes.forEach(detach_dev);
      t3 = claim_space(nodes);
      p0 = claim_element(nodes, "P", {});
      var p0_nodes = children(p0);
      t4 = claim_text(p0_nodes, "This is my contribution to the web. Impressive, right?!");
      p0_nodes.forEach(detach_dev);
      t5 = claim_space(nodes);
      p1 = claim_element(nodes, "P", {});
      var p1_nodes = children(p1);
      t6 = claim_text(p1_nodes, "As you can see there is not much here yet. Here is a story for you:");
      p1_nodes.forEach(detach_dev);
      t7 = claim_space(nodes);
      p2 = claim_element(nodes, "P", {});
      var p2_nodes = children(p2);
      t8 = claim_text(p2_nodes, "I have been teaching myself web development for approximately 5 years now.\n  Among other things I have been freelancing and creating a proto jamstack\n  website builder.");
      p2_nodes.forEach(detach_dev);
      t9 = claim_space(nodes);
      p3 = claim_element(nodes, "P", {});
      var p3_nodes = children(p3);
      t10 = claim_text(p3_nodes, "These wanderings lead me to a lot of reflexion about what I'll call the\n  'personal web'. A place on the web for you, that belongs to you and that you\n  can control entirely even if you are not a techie.");
      p3_nodes.forEach(detach_dev);
      t11 = claim_space(nodes);
      p4 = claim_element(nodes, "P", {});
      var p4_nodes = children(p4);
      t12 = claim_text(p4_nodes, "This comes with a lot of challenges but I believe we have everything we need\n  to make it happen. Sure, new protocols and big complicated tech could probably\n  help but I will leave that to smarter people. In the meantime I truly believe\n  that a more open web is just a splat of motivation away.");
      p4_nodes.forEach(detach_dev);
      t13 = claim_space(nodes);
      p5 = claim_element(nodes, "P", {});
      var p5_nodes = children(p5);
      t14 = claim_text(p5_nodes, "Let's find some decent defaults and a way to customize everything techie.\n  Let's use some comon sense low-tech stack. And let's start a small revolution\n  where anyone can just easily creates its personal space on the web and connect\n  with others.");
      p5_nodes.forEach(detach_dev);
      t15 = claim_space(nodes);
      br = claim_element(nodes, "BR", {});
      t16 = claim_space(nodes);
      p6 = claim_element(nodes, "P", {});
      var p6_nodes = children(p6);
      t17 = claim_text(p6_nodes, "The goal of this website is to build my personal space and to be the sandbox\n  to create tooling for anyone to do the same");
      p6_nodes.forEach(detach_dev);
      t18 = claim_space(nodes);
      p7 = claim_element(nodes, "P", {});
      var p7_nodes = children(p7);
      t19 = claim_text(p7_nodes, "I have got a lot of unfinished (and unstarted) articles and code snippets\n  lying around. Hopefully there is value in it and taking the time to share will\n  benefit everyone (including me).");
      p7_nodes.forEach(detach_dev);
      t20 = claim_space(nodes);
      p8 = claim_element(nodes, "P", {});
      var p8_nodes = children(p8);
      t21 = claim_text(p8_nodes, "Feedbacks are greatly appreciated.");
      p8_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      add_location(h1, file, 0, 0, 0);
      add_location(h2, file, 1, 0, 25);
      add_location(p0, file, 2, 0, 39);
      add_location(p1, file, 3, 0, 102);
      add_location(p2, file, 4, 0, 177);
      add_location(p3, file, 9, 0, 357);
      add_location(p4, file, 14, 0, 572);
      add_location(p5, file, 20, 0, 880);
      add_location(br, file, 27, 0, 1142);
      add_location(p6, file, 29, 0, 1150);
      add_location(p7, file, 33, 0, 1284);
      add_location(p8, file, 38, 0, 1485);
    },
    m: function mount(target, anchor) {
      insert_dev(target, h1, anchor);
      append_dev(h1, t0);
      insert_dev(target, t1, anchor);
      insert_dev(target, h2, anchor);
      append_dev(h2, t2);
      insert_dev(target, t3, anchor);
      insert_dev(target, p0, anchor);
      append_dev(p0, t4);
      insert_dev(target, t5, anchor);
      insert_dev(target, p1, anchor);
      append_dev(p1, t6);
      insert_dev(target, t7, anchor);
      insert_dev(target, p2, anchor);
      append_dev(p2, t8);
      insert_dev(target, t9, anchor);
      insert_dev(target, p3, anchor);
      append_dev(p3, t10);
      insert_dev(target, t11, anchor);
      insert_dev(target, p4, anchor);
      append_dev(p4, t12);
      insert_dev(target, t13, anchor);
      insert_dev(target, p5, anchor);
      append_dev(p5, t14);
      insert_dev(target, t15, anchor);
      insert_dev(target, br, anchor);
      insert_dev(target, t16, anchor);
      insert_dev(target, p6, anchor);
      append_dev(p6, t17);
      insert_dev(target, t18, anchor);
      insert_dev(target, p7, anchor);
      append_dev(p7, t19);
      insert_dev(target, t20, anchor);
      insert_dev(target, p8, anchor);
      append_dev(p8, t21);
    },
    p: noop,
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(h1);
      if (detaching) detach_dev(t1);
      if (detaching) detach_dev(h2);
      if (detaching) detach_dev(t3);
      if (detaching) detach_dev(p0);
      if (detaching) detach_dev(t5);
      if (detaching) detach_dev(p1);
      if (detaching) detach_dev(t7);
      if (detaching) detach_dev(p2);
      if (detaching) detach_dev(t9);
      if (detaching) detach_dev(p3);
      if (detaching) detach_dev(t11);
      if (detaching) detach_dev(p4);
      if (detaching) detach_dev(t13);
      if (detaching) detach_dev(p5);
      if (detaching) detach_dev(t15);
      if (detaching) detach_dev(br);
      if (detaching) detach_dev(t16);
      if (detaching) detach_dev(p6);
      if (detaching) detach_dev(t18);
      if (detaching) detach_dev(p7);
      if (detaching) detach_dev(t20);
      if (detaching) detach_dev(p8);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

class Src extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, null, create_fragment, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Src",
      options,
      id: create_fragment.name
    });
  }

}

export default Src;